# Import necessary libraries
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import numpy as np

# Load dataset (using Iris dataset)
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Labels

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create a basic Decision Tree classifier
clf = DecisionTreeClassifier(random_state=42)

# Hyperparameter tuning using Grid Search
param_grid = {
    'criterion': ['gini', 'entropy'],            # Split quality metrics
    'max_depth': [None, 10, 20, 30],             # Maximum depth of the tree
    'min_samples_split': [2, 5, 10],             # Minimum samples required to split
    'min_samples_leaf': [1, 2, 5],               # Minimum samples in leaf nodes
    'max_features': [None, 'sqrt', 'log2']       # Number of features to consider
}

# Perform Grid Search with cross-validation (5-fold)
grid_search = GridSearchCV(estimator=clf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=1)
grid_search.fit(X_train, y_train)

# Best parameters from Grid Search
print("Best Parameters:", grid_search.best_params_)

# Train the classifier with the best parameters
best_clf = grid_search.best_estimator_
best_clf.fit(X_train, y_train)

# Make predictions
y_pred = best_clf.predict(X_test)

# Print accuracy and classification report
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Cross-validation (10-fold)
cv_scores = cross_val_score(best_clf, X, y, cv=10)
print("Cross-Validation Accuracy (10-fold):", np.mean(cv_scores))

# Feature importance
importances = best_clf.feature_importances_
indices = np.argsort(importances)[::-1]
features = iris.feature_names

# Plot feature importance
plt.figure()
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), [features[i] for i in indices], rotation=90)
plt.tight_layout()
plt.show()
